{"version":3,"sources":["Uploader.js"],"names":["define","langx","ArrayList","uploader","$","Widget","filer","displaySize","bytes","i","parseInt","Math","floor","log","pow","toFixed","displayDate","timestamp","Date","toLocaleString","FileItem","Stateful","inherit","state","start","this","isPending","get","submit","trigger","cancel","abort","destroy","progress","data","fail","error","done","result","getState","isRunning","isDone","isError","FileItemCollection","item","FileItemWidget","className","options","selectors","fileName","fileSize","clear","message","String","Number","_init","processUploadMsg","doneMsg","model","on","close","updateProgress","hasFailed","hasDone","update","_refresh","updates","percent","loaded","total","progressHTML","_velm","find","css","parent","html","when_pending","size","when_running","when_done","add","addClass","removeClass","_startup","self","click","collection","remove","computeData","extend","Uploader","klassName","pluginName","uploadUrl","autoUpload","fileList","nodata","pickFiles","startUploads","cancelUploads","dataType","fileItem","template","_files","filePicker","uploadProcess","_elm","url","formData","singleFileUploads","picker","e","uploadManagerFiles","each","files","index","file_data","id","file_id","file","processor","push","renderFile","errorThrown","bindProcessEvents","length","at","forEach","with_files_elements","without_files_elements","count","file_view","render","attach"],"mappings":"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","file":"../Uploader.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-data-collection/ArrayList\",\r\n  \"./domx/uploader\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-widgets-base/Widget\",\r\n  \"./filer\"\r\n]  ,function(langx,ArrayList,uploader, $, Widget,filer){\r\n\r\n    function displaySize(bytes) {\r\n        var sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n        if (bytes == 0) return '0 B';\r\n        var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n        return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];\r\n    }\r\n    function displayDate(timestamp) {\r\n        return new Date(timestamp).toLocaleString();\r\n    }\r\n    /**\r\n     * This model represents a file.\r\n     *\r\n     */\r\n    var FileItem = langx.Stateful.inherit({\r\n        state: \"pending\",\r\n\r\n        /**\r\n         * Start upload.\r\n         *\r\n         */\r\n        start: function ()  {\r\n            if (this.isPending()) {\r\n                this.get('processor').submit();\r\n                this.state = \"running\";\r\n\r\n                // Dispatch event\r\n                this.trigger('filestarted', this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancel a file upload.\r\n         *\r\n         */\r\n        cancel: function () {\r\n            this.get('processor').abort();\r\n            this.destroy();\r\n\r\n            // Dispatch event\r\n            this.state = \"canceled\";\r\n            this.trigger('filecanceled', this);\r\n        },\r\n\r\n        /**\r\n         * Notify file that progress updated.\r\n         *\r\n         */\r\n        progress: function (data)  {\r\n            // Dispatch event\r\n            this.trigger('fileprogress', this.get('processor').progress());\r\n        },\r\n\r\n        /**\r\n         * Notify file that upload failed.\r\n         *\r\n         */\r\n        fail: function (error)  {\r\n            // Dispatch event\r\n            this.state = \"error\";\r\n            this.trigger('filefailed', error);\r\n        },\r\n\r\n        /**\r\n         * Notify file that upload is done.\r\n         *\r\n         */\r\n        done: function (result)  {\r\n            // Dispatch event\r\n            this.state = \"error\";\r\n            this.trigger('filedone', result);\r\n        },\r\n\r\n        /**\r\n         * Is this file pending to be uploaded ?\r\n         *\r\n         */\r\n        isPending: function ()  {\r\n            return this.getState() == \"pending\";\r\n        },\r\n\r\n        /**\r\n         * Is this file currently uploading ?\r\n         *\r\n         */\r\n        isRunning: function () {\r\n            return this.getState() == \"running\";\r\n        },\r\n\r\n        /**\r\n         * Is this file uploaded ?\r\n         *\r\n         */\r\n        isDone: function () {\r\n            return this.getState() == \"done\";\r\n        },\r\n\r\n        /**\r\n         * Is this upload in error ?\r\n         *\r\n         */\r\n        isError: function () {\r\n            return this.getState() == \"error\" || this.getState == \"canceled\";\r\n        },\r\n\r\n        /**\r\n         * Get the file state.\r\n         *\r\n         */\r\n        getState: function () {\r\n            return this.state;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * This is a file collection, used to manage the selected\r\n     * and processing files.\r\n     *\r\n     */\r\n    var FileItemCollection = ArrayList.inherit({\r\n        item: FileItem\r\n    });\r\n\r\n    /**\r\n     * A file view, which is the view that manage a single file\r\n     * process in the upload manager.\r\n     *\r\n     */\r\n    var FileItemWidget = Widget.inherit({\r\n        className: 'upload-manager-file row',\r\n\r\n        options : {\r\n          selectors : {\r\n            fileName : \".name\",\r\n            fileSize : \".size\",\r\n            cancel : \".cancel\",\r\n            clear : \".clear\",\r\n            progress : \".progress\",\r\n            message : \".message\"\r\n          }\r\n        },\r\n\r\n        state : {\r\n          fileName : String,\r\n          fileSize : Number\r\n        },\r\n\r\n        _init: function () {\r\n            this.processUploadMsg = this.options.processUploadMsg;\r\n            this.doneMsg = this.options.doneMsg;\r\n\r\n            this.model = this.options.model;\r\n\r\n            this.fileName(this.options.fileName);\r\n            this.fileSize(this.options.fileSize);\r\n\r\n            // Bind model events\r\n            this.model.on('destroy', this.close, this);\r\n            this.model.on('fileprogress', this.updateProgress, this);\r\n            this.model.on('filefailed', this.hasFailed, this);\r\n            this.model.on('filedone', this.hasDone, this);\r\n\r\n            // In each case, update view\r\n            this.model.on('all', this.update, this);\r\n\r\n            // Bind events\r\n            //this.bindEvents();\r\n\r\n            // Update elements\r\n            this.update();            \r\n        },\r\n\r\n        _refresh : function(updates) {\r\n\r\n        },\r\n\r\n        /**\r\n         * Update upload progress.\r\n         *\r\n         */\r\n        updateProgress: function (progress) {\r\n            var percent = parseInt(progress.loaded / progress.total * 100, 10);\r\n            var progressHTML = displaySize(progress.loaded)+' of '+ displaySize(progress.total);\r\n            if (percent >= 100 && this.processUploadMsg) { progressHTML = this.processUploadMsg; }\r\n\r\n            this._velm.$('.progress')\r\n                .find('.bar')\r\n                .css('width', percent+'%')\r\n                .parent()\r\n                .find('.progress-label')\r\n                .html(progressHTML);\r\n        },\r\n\r\n        /**\r\n         * File upload has failed.\r\n         *\r\n         */\r\n        hasFailed: function (error){\r\n            this._velm.$('.message').html('<i class=\"icon-error\"></i> '+error);\r\n        },\r\n\r\n        /**\r\n         * File upload is done.\r\n         *\r\n         */\r\n        hasDone: function (result){\r\n            this._velm.$('.message').html('<i class=\"icon-success\"></i> ' + (this.doneMsg || 'Uploaded'));\r\n        },\r\n\r\n        /**\r\n         * Update view without complete rendering.\r\n         *\r\n         */\r\n        update: function () {\r\n            var selectors = this.options.selectors,\r\n                when_pending = this._velm.$(selectors.size + \",\" + selectors.cancel),\r\n                when_running = this._velm.$(selectors.progress + \",\" + selectors.cancel),\r\n                when_done = this._velm.$(selectors.message + \",\" + selectors.clear);\r\n\r\n            if (this.model.isPending()) {\r\n                when_running.add(when_done).addClass('hidden');\r\n                when_pending.removeClass('hidden');\r\n            } else if (this.model.isRunning()) {\r\n                when_pending.add(when_done).addClass('hidden');\r\n                when_running.removeClass('hidden');\r\n            } else if (this.model.isDone() || this.model.isError()) {\r\n                when_pending.add(when_running).addClass('hidden');\r\n                when_done.removeClass('hidden');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Startup widget with binding events\r\n         * @override\r\n         *\r\n         */\r\n        _startup: function () {\r\n            var self = this;\r\n\r\n            // DOM events\r\n            this._velm.$(this.options.selectors.cancel).click(function(){\r\n                self.model.cancel();\r\n                self.collection.remove(self.model);\r\n            });\r\n            this._velm.$(this.options.selectors.clear).click(function(){\r\n                self.model.destroy();\r\n                self.collection.remove(self.model);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Compute data to be passed to the view.\r\n         *\r\n         */\r\n        computeData: function () {\r\n            return $.extend({\r\n              displaySize : displaySize,\r\n              displayDate : displayDate\r\n            }, this.model.get('data'));\r\n        }\r\n    });\r\n\r\n\r\n    var Uploader =  Widget.inherit({\r\n        klassName : \"Uploader\",\r\n        pluginName : \"lark.uploader\",\r\n\r\n        options: {\r\n\r\n            uploadUrl: '/upload',\r\n            autoUpload: false,\r\n            selectors : {\r\n              fileList : '.file-list',\r\n              nodata : \".file-list .no-data\",\r\n              pickFiles: '.file-picker',\r\n              startUploads: '.start-uploads',\r\n              cancelUploads: '.cancel-uploads',\r\n            },\r\n\r\n            dataType: 'json',\r\n\r\n            fileItem : {\r\n            \tselectors : {\r\n\r\n            \t},\r\n\r\n            \ttemplate : null\r\n            }\r\n        },\r\n\r\n        state : {\r\n        },\r\n\r\n        /**\r\n         * Render the main part of upload manager.\r\n         *\r\n         */\r\n        _init: function () {\r\n            var self = this;\r\n\r\n\r\n            // Create the file list\r\n            var files = this._files = new FileItemCollection();\r\n\r\n            // Add add files handler\r\n            var filePicker = this._velm.$(this.options.selectors.pickFiles), self = this;\r\n\r\n            this.uploadProcess =  uploader(this._elm,{  //$.$(this.el).fileupload({\r\n                dataType: this.options.dataType,\r\n                url: this.options.uploadUrl,\r\n                formData: this.options.formData,\r\n                autoUpload: this.options.autoUpload,\r\n                singleFileUploads: true,\r\n                picker : filePicker,\r\n\r\n                'add' : function (e, data) {\r\n                    // Create an array in which the file objects\r\n                    // will be stored.\r\n                    data.uploadManagerFiles = [];\r\n\r\n                    // A file is added, process for each file.\r\n                    // Note: every times, the data.files array length is 1 because\r\n                    //       of \"singleFileUploads\" option.\r\n                    langx.each(data.files, function (index, file_data) {\r\n                        // Create the file object\r\n                        file_data.id = self.file_id++;\r\n                        var file = new FileItem({\r\n                            data: file_data,\r\n                            processor: data\r\n                        });\r\n\r\n                        // Add file in data\r\n                        data.uploadManagerFiles.push(file);\r\n\r\n                        // Trigger event\r\n                        //self.trigger('fileadd', file);\r\n                        // Add it to current list\r\n                        self._files.add(file);\r\n\r\n                        // Create the view\r\n                        self.renderFile(file);\r\n\r\n                    });\r\n                },\r\n                'progress' : function (e, data) {\r\n                    langx.each(data.uploadManagerFiles, function (index, file) {\r\n                        //self.trigger('fileprogress', file, data);\r\n\r\n                        file.progress(data);\r\n                    });\r\n                },\r\n\r\n                'fail' : function (e, data) {\r\n                    langx.each(data.uploadManagerFiles, function (index, file) {\r\n                        var error = \"Unknown error\";\r\n                        if (typeof data.errorThrown == \"string\") {\r\n                            error = data.errorThrown;\r\n                        } else if (typeof data.errorThrown == \"object\") {\r\n                            error = data.errorThrown.message;\r\n                        } else if (data.result) {\r\n                            if (data.result.error) {\r\n                                error = data.result.error;\r\n                            } else if (data.result.files && data.result.files[index] && data.result.files[index].error) {\r\n                                error = data.result.files[index].error;\r\n                            } else {\r\n                                error = \"Unknown remote error\";\r\n                            }\r\n                        }\r\n\r\n                        //self.trigger('filefail', file, error);\r\n                        file.fail(error);\r\n                    });\r\n                },\r\n\r\n                'done' : function (e, data) {\r\n                    langx.each(data.uploadManagerFiles, function (index, file) {\r\n                        //self.trigger('filedone', file, data);\r\n                        file.done(data.result);\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n            // Add upload process events handlers\r\n            this.bindProcessEvents();\r\n\r\n            // Add cancel all handler\r\n            this._velm.$(this.options.selectors.cancelUploads).click(function(){\r\n                while (self._files.length) {\r\n                    self._files.at(0).cancel();\r\n                }\r\n            });\r\n\r\n            // Add start uploads handler\r\n            this._velm.$(this.options.selectors.startUploads).click(function(){\r\n                self._files.forEach(function(file){\r\n                    file.start();\r\n                });\r\n            });\r\n\r\n            // Render current files\r\n            /*\r\n            this.files.forEach(function (file) {\r\n                self.renderFile(file);\r\n            });\r\n            */\r\n\r\n            this._refresh({files:true});\r\n        \r\n\r\n            this._files.on('all', function(){\r\n              self._refresh({files:true});\r\n            });\r\n\r\n        },\r\n\r\n        _refresh : function(updates) {\r\n            var self = this;\r\n            function updateFileList()  {\r\n                var selectors = self.options.selectors,\r\n                    files = self._files;\r\n                var with_files_elements = self._velm.$(selectors.cancelUploads + ',' + selectors.startUploads);\r\n                var without_files_elements = self._velm.$(selectors.nodata);\r\n                if (files.count() > 0) {\r\n                    with_files_elements.removeClass('hidden');\r\n                    without_files_elements.addClass('hidden');\r\n                } else {\r\n                    with_files_elements.addClass('hidden');\r\n                    without_files_elements.removeClass('hidden');\r\n                }\r\n            }\r\n\r\n            if (updates[\"files\"]) {\r\n              updateFileList();\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * Render a file.\r\n         *\r\n         */\r\n        renderFile: function (file) {\r\n            var file_view = new FileItemWidget(\r\n              $(langx.template(this.options.fileItem.template,file.get(\"data\")))[0],\r\n              {\r\n                model: file,\r\n                template : this.options.fileItem.template\r\n            });\r\n            //this._velm.$(this.options.selectors.fileList).append(file_view.render());\r\n            file_view.render();\r\n            file_view.attach(this._velm.$(this.options.selectors.fileList)[0]);\r\n        },\r\n\r\n        /**\r\n         * Bind events on the upload processor.\r\n         *\r\n         */\r\n        bindProcessEvents: function () {\r\n        }\r\n    });\r\n\r\n    return filer.Uploader = Uploader;\r\n});\r\n"]}